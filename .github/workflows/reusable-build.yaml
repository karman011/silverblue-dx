name: Reusable Build and Push
on:
  workflow_call:
    inputs:
      fedora_image_version:
        description: "40, 41, 42, latest"
        required: true
        type: string
      brand_name:
        description: "silverblue-dx"
        required: true
        type: string
      rechunk:
        description: "Rechunk the image"
        required: false
        type: boolean
        default: false
      weekly_tag_day:
        description: "Tag stable weekly on for example 'Tuesday'"
        required: false
        type: string
        default: Tuesday
    outputs:
      images:
        description: "An array of images built and pushed to the registry"
        value: ${{ jobs.check.outputs.images }}
env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  BASE_IMAGE_REGISTRY: quay.io/fedora


concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.fedora_image_version }}
  cancel-in-progress: true

jobs:
  build_container:
    name: image
    runs-on: ubuntu-24.04
    continue-on-error: false
    outputs:
      image_full: ${{ steps.generate-outputs.outputs.image }}
    strategy:
      fail-fast: false
      matrix:
        brand_name:
          - ${{ inputs.brand_name }}
        fedora_image_version:
          - ${{ inputs.fedora_image_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Matrix Variables
        run: |
          echo "IMAGE_NAME=${{ matrix.brand_name }}" >> $GITHUB_ENV
          # Set BASE_IMAGE_NAME
          if [[ "${{ matrix.brand_name }}" =~ "silverblue-dx" ]]; then
              echo "BASE_IMAGE_NAME=silverblue" >> $GITHUB_ENV
          else
              echo "BASE_IMAGE_NAME=silverblue" >> $GITHUB_ENV
          fi

      - name: Get Current Fedora Version
        id: labels
        uses: Wandalen/wretry.action@ffdd254f4eaf1562b8a2c66aeaa37f1ff2231179 # v3.7.3
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -eox pipefail
            KERNEL_RELEASE=$(skopeo inspect docker://${{ env.BASE_IMAGE_REGISTRY }}/fedora-${{ env.BASE_IMAGE_NAME }}:${{ matrix.fedora_image_version }} | jq -r '.Labels["ostree.linux"]')

            fedora_major_version=$(echo $KERNEL_RELEASE | grep -oP 'fc\K[0-9]+')
            echo "kernel_release=$KERNEL_RELEASE" >> $GITHUB_ENV
            echo "fedora_major_version=$fedora_major_version" >> $GITHUB_ENV
            ver=$(skopeo inspect docker://${{ env.BASE_IMAGE_REGISTRY }}/fedora-${{ env.BASE_IMAGE_NAME }}:${{ matrix.fedora_image_version }} | jq -r '.Labels["org.opencontainers.image.version"]')
            if [ -z "$ver" ] || [ "null" = "$ver" ]; then
              echo "inspected image version must not be empty or null"
              exit 1
            fi
            echo "VERSION=$ver" >> $GITHUB_ENV

      # - name: Verify Akmods
      #   uses: EyeCantCU/cosign-action/verify@58722a084c82190b57863002d494c91eabbe9e79 # v0.3.0
      #   with:
      #     containers: akmods:${{ env.AKMODS_FLAVOR}}-${{ env.fedora_version }}

      # - name: Verify Nvidia
      #   uses: EyeCantCU/cosign-action/verify@58722a084c82190b57863002d494c91eabbe9e79 # v0.3.0
      #   with:
      #     containers: akmods-nvidia:${{ env.AKMODS_FLAVOR}}-${{ env.fedora_version }}

      # - name: Verify ZFS
      #   uses: EyeCantCU/cosign-action/verify@58722a084c82190b57863002d494c91eabbe9e79 # v0.3.0
      #   if: inputs.fedora_version != 'beta' && inputs.fedora_version != 'latest'
      #   with:
      #     containers: akmods-zfs:coreos-stable-${{ env.fedora_version }}

      # - name: Verify Kernel Cache
      #   uses: EyeCantCU/cosign-action/verify@58722a084c82190b57863002d494c91eabbe9e79 # v0.3.0
      #   with:
      #     containers: ${{ env.AKMODS_FLAVOR }}-kernel:${{ env.kernel_release }}

      # - name: Verify Kernel Version Matches
      #   uses: Wandalen/wretry.action@ffdd254f4eaf1562b8a2c66aeaa37f1ff2231179 # v3.7.3
      #   with:
      #     attempt_limit: 3
      #     attempt_delay: 15000
      #     command: |
      #       set -x
      #       akmods_version=$(skopeo inspect docker://ghcr.io/ublue-os/akmods:${{ env.AKMODS_FLAVOR }}-${{ env.fedora_version }} | jq -r '.Labels["ostree.linux"]')
      #       if [[ "${akmods_version}" == "${{ env.kernel_release }}" ]]; then
      #         echo "Kernel Versions Match"
      #       else
      #         echo "Kernel Version do Not Match"
      #         exit 1
      #       fi

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate timestamp and short SHA
          TIMESTAMP="$(date +%Y%m%d)"
          SHA_SHORT="${GITHUB_SHA::7}"
          
          # Initialize tags array
          BUILD_TAGS=()
          
          # Base version tag
          BASE_TAG="${{ matrix.fedora_image_version }}"
          
          # Generate tags based on event type
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PRs: add PR number and commit hash
            PR_NUMBER="${{ github.event.pull_request.number }}"
            BUILD_TAGS=(
              "${BASE_TAG}-pr${PR_NUMBER}"
              "${BASE_TAG}-${SHA_SHORT}"
            )
          else
            # For other events: use version and timestamp
            BUILD_TAGS=(
              "${BASE_TAG}"
              "${BASE_TAG}-${TIMESTAMP}"
            )
          fi
          
          # Set default tag for rechunk use
          echo "DEFAULT_TAG=${BUILD_TAGS[0]}" >> $GITHUB_ENV
          
          # Log generated tags
          echo "Generated tags:"
          printf '%s\n' "${BUILD_TAGS[@]}"
          
          # Set output for use in later steps
          echo "alias_tags=${BUILD_TAGS[*]}" >> $GITHUB_OUTPUT

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5
        id: meta
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.version=${{ env.VERSION }}
            org.opencontainers.image.description=An interpretation of the Ubuntu spirit built on Fedora technology
            ostree.linux=${{ env.kernel_release }}

      - name: Define env.SHA_HEAD_SHORT
        run: |
            echo "SHA_HEAD_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build Image
        id: build_image
        run: |
          set -euox pipefail

          BUILD_ARGS=()
          BUILD_ARGS+=("--build-arg" "BASE_IMAGE_NAME=${{ env.BASE_IMAGE_NAME }}")
          BUILD_ARGS+=("--build-arg" "IMAGE_NAME=${{ env.IMAGE_NAME }}")
          BUILD_ARGS+=("--build-arg" "FEDORA_IMAGE_VERSION=${{ matrix.fedora_image_version }}")
          BUILD_ARGS+=("--build-arg" "SHA_HEAD_SHORT=${{ env.SHA_HEAD_SHORT }}")
          BUILD_ARGS+=("--build-arg" "FEDORA_MAJOR_VERSION=${{ env.fedora_major_version }}")
          
          LABEL_ARGS=()
          IFS=' ' read -r -a labels_array <<< "${{ steps.meta.outputs.labels }}"
          for label in "${labels_array[@]}"; do
            LABEL_ARGS+=("--label" "${label}")
          done
          
          RAW_TAG="raw"
          BUILD_TAG=("--tag" "${{ env.IMAGE_NAME }}:${RAW_TAG}")
          sudo podman build --format docker \
            "${BUILD_ARGS[@]}" \
            "${BUILD_TAG[@]}" \
            "${LABEL_ARGS[@]}" \
            .

          sudo podman image ls

          echo "image=${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "tags=${{ steps.generate-tags.outputs.alias_tags }}" >> $GITHUB_OUTPUT
          echo "raw_tag=${RAW_TAG}" >> $GITHUB_OUTPUT


      # - name: Check Secureboot
      #   if: github.event_name == 'pull_request' && ( matrix.image_flavor == 'main' || matrix.image_flavor == 'nvidia' ) || github.event_name != 'pull_request'
      #   shell: bash
      #   run: |
      #     set -x
      #     if [[ ! $(command -v sbverify) || ! $(command -v curl) || ! $(command -v openssl) ]]; then
      #       sudo apt update
      #       sudo apt install sbsigntool curl openssl
      #     fi
      #     sudo podman run -d --rm --name ${{env.IMAGE_NAME}}-$(echo "${{ steps.generate-tags.outputs.alias_tags }}" | cut -d " " -f 1) "${{ env.IMAGE_NAME }}":$(echo "${{ steps.generate-tags.outputs.alias_tags }}" | cut -d " " -f 1) sleep 1000
      #     sudo podman cp ${{env.IMAGE_NAME}}-$(echo "${{ steps.generate-tags.outputs.alias_tags }}" | cut -d " " -f 1):/usr/lib/modules/${{ env.kernel_release }}/vmlinuz .
      #     sudo podman rm -f ${{env.IMAGE_NAME}}-$(echo "${{ steps.generate-tags.outputs.alias_tags }}" | cut -d " " -f 1) || true
      #     sudo kill -9 $(sudo podman inspect --format '{{.State.Pid}}' ${{env.IMAGE_NAME}}-$(echo "${{ steps.generate-tags.outputs.alias_tags }}" | cut -d " " -f 1)) || true
      #     sbverify --list vmlinuz
      #     curl --retry 3 -Lo kernel-sign.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key.der
      #     curl --retry 3 -Lo akmods.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key_2.der
      #     openssl x509 -in kernel-sign.der -out kernel-sign.crt
      #     openssl x509 -in akmods.der -out akmods.crt
      #     sbverify --cert kernel-sign.crt vmlinuz || exit 1
      #     sbverify --cert akmods.crt vmlinuz || exit 1

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@d0603cd0a7dd490be678164909f65c7737470a7f # v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Rechunk Image
        id: rechunk
        if: inputs.rechunk == true
        uses: hhd-dev/rechunk@602e6d62558ab23e15e8764ce06e26c0f328da71 # v1.0.1
        with:
          rechunk: ghcr.io/hhd-dev/rechunk:v1.0.1
          ref: ${{ steps.build_image.outputs.image }}:${{ steps.build_image.outputs.raw_tag }}
          skip_compression: 'true'
          labels: ${{ steps.meta.outputs.labels }}
          prev-ref: ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_image.outputs.image }}:${{ env.DEFAULT_TAG }}

      # Overwrite the image with the chuncked image
      - name: Load Rechunked Image
        if: inputs.rechunk == true && github.event_name != 'pull_request'
        run: |
          sudo podman rmi $(sudo podman image ls -qa) --force
          IMAGE=$(sudo podman pull ${{ steps.rechunk.outputs.ref }})
          sudo rm -rf ${{ steps.rechunk.outputs.output }}
          for tag in ${{ steps.build_image.outputs.tags }}; do
            sudo podman tag $IMAGE ${{ env.IMAGE_NAME }}:${tag}
          done

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | podman login ghcr.io -u ${{ github.actor }} --password-stdin
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push to GHCR
        id: push
        if: github.event_name != 'pull_request'
        uses: Wandalen/wretry.action@ffdd254f4eaf1562b8a2c66aeaa37f1ff2231179 # v3.7.3
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -euox pipefail

            for tag in ${{ steps.build_image.outputs.tags }}; do
              sudo podman push ${{ env.IMAGE_NAME }}:${tag} ${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}:${tag}
            done
            digest=$(skopeo inspect docker://${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}:${{ env.DEFAULT_TAG }} --format '{{.Digest}}')
            echo "digest=${digest}" >> $GITHUB_OUTPUT

      # Sign container
      - uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # v3.7.0
        if: github.event_name != 'pull_request'

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.outputs && fromJSON(steps.push.outputs.outputs).digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      - name: Generate file containing outputs
        if: github.event_name != 'pull_request'
        env:
          DIGEST: ${{ steps.push.outputs.outputs && fromJSON(steps.push.outputs.outputs).digest }}
          IMAGE_REGISTRY: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          FEDORA_VERSION: ${{ matrix.fedora_image_version }}
        run: echo "${IMAGE_REGISTRY}@${DIGEST}" > "${IMAGE_NAME}-${FEDORA_VERSION}.txt"

      - name: Upload artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4
        with:
          name: image-${{ env.IMAGE_NAME }}-${{ matrix.fedora_image_version }}
          retention-days: 1
          if-no-files-found: error
          path: |
            ${{ env.IMAGE_NAME }}-${{ matrix.fedora_image_version }}.txt

  check:
    name: Check all ${{ inputs.brand_name }} ${{ inputs.fedora_image_version }} builds successful
    if: always()
    runs-on: ubuntu-latest
    needs: [build_container]
    outputs:
      images: ${{ steps.generate-outputs.outputs.images }}
    steps:
      - name: Download artifacts
        if: github.event_name != 'pull_request'
        id: download-artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          pattern: image-*
          merge-multiple: true

      - name: Create output
        if: github.event_name != 'pull_request'
        id: generate-outputs
        env:
          JOBS: ${{ toJson(needs) }}
          ARTIFACT_PATH: ${{ steps.download-artifacts.outputs.download-path }}
        run: |
          # Initialize the array
          images=()

          # Populate the array with each line from each file in the artifacts directory
          for file in $ARTIFACT_PATH/*; do
              while IFS= read -r line; do
                images+=("$line")
              done < "$file"
          done

          # Create the GITHUB_OUTPUT in the format '["image1", "image2", ...]'
          echo "images=$(printf '%s\n' "${images[@]}" | jq -R -s -c 'split("\n") | .[:-1]')" >> $GITHUB_OUTPUT

      - name: Check Jobs
        env:
          JOBS: ${{ toJson(needs) }}
        run: |
          echo "Job status:"
          echo $JOBS | jq -r 'to_entries[] | " - \(.key): \(.value.result)"'

          for i in $(echo $JOBS | jq -r 'to_entries[] | .value.result'); do
            if [ "$i" != "success" ] && [ "$i" != "skipped" ]; then
              echo ""
              echo "Status check not okay!"
              exit 1
            fi
          done

  # build_iso:
  #   name: iso
  #   needs: [check]
  #   if: (github.repository_owner == 'ublue-os') && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && (github.ref_name == 'main' || github.ref_name == 'testing') && inputs.fedora_version != 'beta' && inputs.fedora_version != 'latest'
  #   # Eventually would be nice for building images in PRs
  #   #if: ${{ endsWith(github.event.pull_request.title, '[ISO]') }}
  #   uses: ./.github/workflows/reusable-build-iso.yml
  #   secrets: inherit
  #   with:
  #     brand_name: ${{ inputs.brand_name }}
  #     fedora_version: ${{ inputs.fedora_version }}
